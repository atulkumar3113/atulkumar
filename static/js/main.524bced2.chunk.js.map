{"version":3,"sources":["components/MainContainer.js","components/Sidebar.js","components/ResponsiveDrawer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","toolbar","mixins","drawerPaper","width","content","flexGrow","padding","spacing","MainContainer","useState","ImgSource","classes","className","map","item","index","key","src","alt","Sidebar","href","root","display","drawer","breakpoints","up","flexShrink","appBar","backgroundColor","marginLeft","title","color","fontSize","menuButton","marginRight","ResponsiveDrawer","props","window","useTheme","React","mobileOpen","setMobileOpen","handleDrawerToggle","container","undefined","document","body","AppBar","position","Toolbar","IconButton","aria-label","edge","onClick","style","fontWeight","Hidden","smUp","implementation","Drawer","variant","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.524bced2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"../../src/styles/mainContainer.css\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst MainContainer = () => {\r\n  const [ImgSource] = useState([\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n  ]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <main className={classes.content}>\r\n      <div className=\"container\">\r\n        <div className=\"gridLayout\">\r\n          {ImgSource.map((item, index) => (\r\n            <div className=\"img-wrapper\" key={index}>\r\n              <img src={item} alt=\"\" />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\nimport \"../styles/sidebar.css\";\r\nconst Sidebar = () => {\r\n  return (\r\n    <div className=\"sidenav\">\r\n      <div className=\"user-info\">\r\n        <div className=\"user-img\">\r\n          <img src=\"http://placekitten.com/320/220\" alt=\"\" />\r\n        </div>\r\n        <p>Atul Kumar</p>\r\n      </div>\r\n      <ul>\r\n        <li>\r\n          <a href=\"#\">Home</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\">About</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\">Contact</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport MainContainer from \"./MainContainer\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nconst drawerWidth = 260;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#FFFFFF\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  title: {\r\n    color: \"#363333\",\r\n    fontSize: \"1.5rem\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    backgroundColor: \"#36b26a\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#36b26a\",\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = <Sidebar />;\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <p className={classes.title}>\r\n            My <span style={{ fontWeight: \"bold\" }}>Latest Work</span>\r\n          </p>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <MainContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","import React from \"react\";\nimport ResponsiveDrawer from \"./components/ResponsiveDrawer\";\n\nconst App = () => {\n  return (\n    <div>\n      <ResponsiveDrawer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../src/styles/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}