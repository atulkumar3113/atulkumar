{"version":3,"sources":["components/Navbar.js","components/Intro.js","components/Work.js","App.js","serviceWorker.js","index.js","assets/images/img.jpeg"],"names":["Navbar","className","Intro","src","img","alt","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","Work","swipeable","draggable","ssr","infinite","keyBoardControl","customTransition","transitionDuration","containerClass","dotListClass","itemClass","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sOAeeA,G,YAbA,WACb,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,mEACb,wCACA,2CACA,yCACA,+C,wBC2BOC,EAjCD,WACZ,OACE,yBAAKD,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,eACb,yBAAKE,IAAKC,IAAKC,IAAI,OAGvB,yBAAKJ,UAAU,mCACb,yBAAKA,UAAU,WACb,mCACA,gMAKA,yKAOJ,yBAAKA,UAAU,mCACb,0K,gBCtBFK,G,YAAa,CACjBC,kBAAmB,CAEjBC,WAAY,CAAEC,IAAK,IAAMC,IAAK,KAC9BC,MAAO,GAETC,QAAS,CACPJ,WAAY,CAAEC,IAAK,IAAMC,IAAK,MAC9BC,MAAO,GAETE,OAAQ,CACNL,WAAY,CAAEC,IAAK,KAAMC,IAAK,KAC9BC,MAAO,GAETG,OAAQ,CACNN,WAAY,CAAEC,IAAK,IAAKC,IAAK,GAC7BC,MAAO,KAkDII,EA9CF,WACX,OACE,yBAAKd,UAAU,cACb,4CACA,kBAAC,IAAD,CACEe,WAAW,EACXC,WAAW,EACXX,WAAYA,EACZY,KAAK,EACLC,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,SACjBC,mBAAoB,IACpBC,eAAe,qBACfC,aAAa,wBACbC,UAAU,+BAEV,yBAAKxB,UAAU,WACb,yBACEE,IAAI,mEACJE,IAAI,MAGR,yBAAKJ,UAAU,WACb,yBACEE,IAAI,sEACJE,IAAI,MAGR,yBAAKJ,UAAU,WACb,yBACEE,IAAI,sEACJE,IAAI,MAGR,yBAAKJ,UAAU,WACb,yBACEE,IAAI,mEACJE,IAAI,SChDDqB,EAVH,WACV,OACE,yBAAKzB,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f9044e65.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../src/styles/navbar.css\";\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"links\">\r\n      <div className=\"text-right d-flex justify-content-md-end justify-content-center\">\r\n        <button>Home</button>\r\n        <button>My Work</button>\r\n        <button>About</button>\r\n        <button>Contact</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../../src/styles/intro.css\";\r\nimport img from \"../../src/assets/images/img.jpeg\";\r\nconst Intro = () => {\r\n  return (\r\n    <div className=\"row intro\">\r\n      <div className=\"col-md-3\">\r\n        <div className=\"img-wrapper\">\r\n          <img src={img} alt=\"\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-5 d-flex align-items-end\">\r\n        <div className=\"details\">\r\n          <h1>Hi,</h1>\r\n          <p>\r\n            Welcome Lorem ipsum, or lipsum as it is sometimes known, is dummy\r\n            text used in laying out print, graphic or web designs. The passage\r\n            is attributed to an unknown.\r\n          </p>\r\n          <p>\r\n            lipsum as it is sometimes known, is dummy text used in laying out\r\n            print, graphic or web designs. The passage is attributed to an\r\n            unknown\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-4 d-flex align-items-end\">\r\n        <p>\r\n          lipsum as it is sometimes known, is dummy text used in laying out\r\n          print, graphic or web designs. The passage is attributed to an unknown\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React from \"react\";\r\nimport Carousel from \"react-multi-carousel\";\r\nimport \"react-multi-carousel/lib/styles.css\";\r\nimport \"../styles/work.css\";\r\n\r\nconst responsive = {\r\n  superLargeDesktop: {\r\n    // the naming can be any, depends on you.\r\n    breakpoint: { max: 4000, min: 3000 },\r\n    items: 5,\r\n  },\r\n  desktop: {\r\n    breakpoint: { max: 3000, min: 1024 },\r\n    items: 4,\r\n  },\r\n  tablet: {\r\n    breakpoint: { max: 1224, min: 464 },\r\n    items: 2,\r\n  },\r\n  mobile: {\r\n    breakpoint: { max: 598, min: 0 },\r\n    items: 1,\r\n  },\r\n};\r\n\r\nconst Work = () => {\r\n  return (\r\n    <div className=\"recentWork\">\r\n      <h6>Recent Works</h6>\r\n      <Carousel\r\n        swipeable={true}\r\n        draggable={false}\r\n        responsive={responsive}\r\n        ssr={true} // means to render carousel on server-side.\r\n        infinite={true}\r\n        keyBoardControl={true}\r\n        customTransition=\"all .5\"\r\n        transitionDuration={100}\r\n        containerClass=\"carousel-container\"\r\n        dotListClass=\"custom-dot-list-style\"\r\n        itemClass=\"carousel-item-padding-40-px\"\r\n      >\r\n        <div className=\"img-box\">\r\n          <img\r\n            src=\"https://images.pexels.com/photos/443446/pexels-photo-443446.jpeg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"img-box\">\r\n          <img\r\n            src=\"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"img-box\">\r\n          <img\r\n            src=\"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"img-box\">\r\n          <img\r\n            src=\"https://images.pexels.com/photos/443446/pexels-photo-443446.jpeg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n      </Carousel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Work;\r\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Intro from \"./components/Intro\";\nimport Work from \"./components/Work\";\n\nconst App = () => {\n  return (\n    <div className=\"container-fluid\">\n      <Navbar />\n      <Intro />\n      <Work />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../src/styles/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img.ef0bf4be.jpeg\";"],"sourceRoot":""}