{"version":3,"sources":["assets/images/img.png","components/Navbar.js","components/Intro.js","components/RecentWork.js","components/Gallery.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","Intro","src","img","alt","style","fontSize","RecentWork","useState","ImgSource","id","map","item","index","key","Gallery","Footer","href","target","rel","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,iC,0NCkB5BC,G,MAfA,WACb,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,mEACb,gCACE,kBAAC,IAAD,CAASC,GAAG,KAAZ,SAEF,gCACE,kBAAC,IAAD,CAASA,GAAG,SAAZ,gB,yBCgCKC,EAxCD,WACZ,OACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,wBACb,6BACE,yBAAKA,UAAU,eACb,yBAAKG,IAAKC,IAAKC,IAAI,MAErB,yBAAKL,UAAU,QACb,0CACA,uBAAGA,UAAU,QAAb,oBACA,uBAAGM,MAAO,CAAEC,SAAU,WAAtB,8BAIN,yBAAKP,UAAU,mCACb,yBAAKA,UAAU,WACb,mCACA,gMAKA,yKAOJ,yBAAKA,UAAU,mCACb,0K,OCLOQ,G,MA1BI,WAAO,IAAD,EACHC,mBAAS,CAC3B,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,mCATKC,EADgB,oBAYvB,OACE,yBAAKC,GAAG,OAAOX,UAAU,cACvB,4CACA,yBAAKA,UAAU,cACZU,EAAUE,KAAI,SAACC,EAAMC,GAAP,OACb,yBAAKd,UAAU,cAAce,IAAKD,GAChC,yBAAKX,IAAKU,EAAMR,IAAI,aCQjBW,EA1BC,WAAO,IAAD,EACAP,mBAAS,CAC3B,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,mCATKC,EADa,oBAYpB,OACE,yBAAKC,GAAG,OAAOX,UAAU,cACvB,wBAAIA,UAAU,QAAd,YACA,yBAAKA,UAAU,cACZU,EAAUE,KAAI,SAACC,EAAMC,GAAP,OACb,yBAAKd,UAAU,cAAce,IAAKD,GAChC,yBAAKX,IAAKU,EAAMR,IAAI,YCiBjBY,G,MApCA,WACb,OACE,yBAAKjB,UAAU,mBACb,yBAAKA,UAAU,4CACb,gCACE,uBACEkB,KAAK,4CACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGpB,UAAU,qBAGjB,gCACE,uBACEkB,KAAK,uCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGpB,UAAU,sBAGjB,gCACE,uBACEkB,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGpB,UAAU,yBCNVqB,EAhBH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKrB,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QAAQC,UAAWR,IAC/B,kBAAC,EAAD,SCNYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4207dbef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.b543d6a4.png\";","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"../../src/styles/navbar.css\";\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"links\">\r\n      <div className=\"text-right d-flex justify-content-md-end justify-content-center\">\r\n        <button>\r\n          <NavLink to=\"/\">Home</NavLink>\r\n        </button>\r\n        <button>\r\n          <NavLink to=\"/work\">My Work</NavLink>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../../src/styles/intro.css\";\r\nimport img from \"../../src/assets/images/img.png\";\r\nconst Intro = () => {\r\n  return (\r\n    <div className=\"row intro\">\r\n      <div className=\"col-md-3 text-center\">\r\n        <div>\r\n          <div className=\"img-wrapper\">\r\n            <img src={img} alt=\"\" />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <h4>Atul Kumar</h4>\r\n            <p className=\"mb-1\">Graphic Designer</p>\r\n            <p style={{ fontSize: \"0.9rem\" }}>atulkumar3113@gmail.com</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-5 d-flex align-items-end\">\r\n        <div className=\"details\">\r\n          <h1>Hi,</h1>\r\n          <p>\r\n            Welcome Lorem ipsum, or lipsum as it is sometimes known, is dummy\r\n            text used in laying out print, graphic or web designs. The passage\r\n            is attributed to an unknown.\r\n          </p>\r\n          <p>\r\n            lipsum as it is sometimes known, is dummy text used in laying out\r\n            print, graphic or web designs. The passage is attributed to an\r\n            unknown\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-4 d-flex align-items-end\">\r\n        <p>\r\n          lipsum as it is sometimes known, is dummy text used in laying out\r\n          print, graphic or web designs. The passage is attributed to an unknown\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/work.css\";\r\n\r\nconst RecentWork = () => {\r\n  const [ImgSource] = useState([\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n  ]);\r\n  return (\r\n    <div id=\"work\" className=\"recentWork\">\r\n      <h6>Recent Works</h6>\r\n      <div className=\"gridLayout\">\r\n        {ImgSource.map((item, index) => (\r\n          <div className=\"img-wrapper\" key={index}>\r\n            <img src={item} alt=\"\" />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecentWork;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/work.css\";\r\n\r\nconst Gallery = () => {\r\n  const [ImgSource] = useState([\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n    \"http://placekitten.com/320/220\",\r\n    \"http://placekitten.com/320/221\",\r\n    \"http://placekitten.com/320/222\",\r\n  ]);\r\n  return (\r\n    <div id=\"work\" className=\"recentWork\">\r\n      <h6 className=\"mt-4\">My Works</h6>\r\n      <div className=\"gridLayout\">\r\n        {ImgSource.map((item, index) => (\r\n          <div className=\"img-wrapper\" key={index}>\r\n            <img src={item} alt=\"\" />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","import React from \"react\";\r\nimport \"../../src/styles/footer.css\";\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footerLinks m-4\">\r\n      <div className=\"text-right d-flex justify-content-center\">\r\n        <button>\r\n          <a\r\n            href=\"https://www.facebook.com/kumar.atul.18400\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fa fa-facebook\"></i>\r\n          </a>\r\n        </button>\r\n        <button>\r\n          <a\r\n            href=\"https://www.instagram.com/Kumarak20/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fa fa-instagram\"></i>\r\n          </a>\r\n        </button>\r\n        <button>\r\n          <a\r\n            href=\"https://dribbble.com/imAtul20\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fa fa-dribbble\"></i>\r\n          </a>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport { HashRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Intro from \"./components/Intro\";\nimport RecentWork from \"./components/RecentWork\";\nimport Gallery from \"./components/Gallery\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"container-fluid\">\n        <Navbar />\n        <Route exact path=\"/\">\n          <Intro />\n          <RecentWork />\n        </Route>\n        <Route path=\"/work\" component={Gallery} />\n        <Footer />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../src/styles/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}